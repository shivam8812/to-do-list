{"version":3,"sources":["logo.svg","ListItems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItems","props","listItems","items","map","item","className","key","text","onClick","handleDelete","handleComplete","cmpitems","completedItems","App","handleInput","e","setState","currentItem","target","value","Date","now","state","bind","handleSubmit","preventDefault","newItem","this","array","filter","newitem","onSubmit","type","placeholder","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,yLC0B5BC,MAvBf,SAAmBC,GACf,IACMC,EADMD,EAAME,MACIC,KAAI,SAAAC,GAElB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACnC,uBAAGD,UAAU,QAAQD,EAAKG,MAC1B,4BAAQC,QAAS,kBAAMR,EAAMS,aAAaL,EAAKE,OAA/C,UACA,4BAAQE,QAAS,kBAAMR,EAAMU,eAAeN,EAAKE,OAAjD,iBAINK,EADmBX,EAAMY,eACDT,KAAI,SAAAC,GAC9B,OAAO,yBAAKC,UAAU,gBAAgBC,IAAKF,EAAKE,KACxC,+DAGR,OACI,6BACA,6BAAML,GACN,6BAAMU,KCwDHE,G,wDAxEb,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IAcRc,YAAY,SAACC,GACT,EAAKC,SAAS,CACXC,YAAY,CACVV,KAAMQ,EAAEG,OAAOC,MAAOb,IAAKc,KAAKC,UAhBvC,EAAKC,MAAQ,CACXpB,MAAO,GACPU,eAAe,GACfK,YAAa,CACVV,KAAM,GAAGD,IAAI,KAGlB,EAAKQ,YAAY,EAAKA,YAAYS,KAAjB,gBACjB,EAAKC,aAAa,EAAKA,aAAaD,KAAlB,gBAClB,EAAKd,aAAa,EAAKA,aAAac,KAAlB,gBAClB,EAAKb,eAAe,EAAKA,eAAea,KAApB,gBAZH,E,yDAsBNR,GACXA,EAAEU,iBACF,IAAMC,EAAQC,KAAKL,MAAML,YACP,KAAfS,EAAQnB,MACToB,KAAKX,SAAS,CACZd,MAAM,CAACwB,GAAF,mBAAaC,KAAKL,MAAMpB,QAC7Be,YAAY,CACVV,KAAK,GAAGD,IAAI,Q,mCAKPA,GACX,IAAIsB,EAAQD,KAAKL,MAAMpB,MAAM2B,QAAO,SAAAzB,GAAI,OAAIA,EAAKE,MAAMA,KACvDqB,KAAKX,SAAS,CACXd,MAAM0B,M,qCAGItB,GACb,IAAIwB,EAAQH,KAAKL,MAAMpB,MAAM2B,QAAO,SAAAzB,GAAI,OAAIA,EAAKE,MAAMA,KACvDqB,KAAKX,SAAS,CACZJ,eAAe,GAAD,mBAAKe,KAAKL,MAAMV,gBAAhB,CAA+BkB,MAE/C,IAAIF,EAAQD,KAAKL,MAAMpB,MAAM2B,QAAO,SAAAzB,GAAI,OAAIA,EAAKE,MAAMA,KACvDqB,KAAKX,SAAS,CACXd,MAAM0B,M,+BAIX,OACE,yBAAKvB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,QACb,2CAGJ,0BAAM0B,SAAUJ,KAAKH,cACrB,2BAAOnB,UAAU,MAAM2B,KAAK,OAAOC,YAAY,WAAWd,MAAOQ,KAAKL,MAAML,YAAYV,KACxF2B,SAAUP,KAAKb,cACf,4BAAQT,UAAU,MAAMG,QAASmB,KAAKH,cAAtC,QAEA,yBAAKnB,UAAU,YACf,kBAAC,EAAD,CAAWH,MAAOyB,KAAKL,MAAMpB,MAAOU,eAAgBe,KAAKL,MAAMV,eAC9DH,aAAckB,KAAKlB,aAAcC,eAAgBiB,KAAKjB,uB,GAlE3CyB,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2e882247.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport './ListItems.css'\r\n\r\nfunction ListItems(props) {\r\n    const items=props.items;\r\n    const listItems=items.map(item => \r\n        {\r\n            return <div className=\"list\" key={item.key}>\r\n                <p className=\"para\">{item.text}</p>\r\n                <button onClick={() => props.handleDelete(item.key)}>delete</button>\r\n                <button onClick={() => props.handleComplete(item.key)}>completed</button>\r\n                </div>\r\n        })\r\n        const completeditems=props.completedItems;\r\n    const cmpitems=completeditems.map(item => {\r\n        return <div className=\"completedlist\" key={item.key}>\r\n                <p>congo your task is completed</p>\r\n                </div>\r\n    })\r\n        return(\r\n            <div>\r\n            <div>{listItems}</div>\r\n            <div>{cmpitems}</div>\r\n            </div>\r\n        )\r\n}\r\nexport default ListItems;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ListItems from './ListItems.js';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      completedItems:[],\n      currentItem: {\n         text: '',key:''\n      }\n    };\n    this.handleInput=this.handleInput.bind(this);\n    this.handleSubmit=this.handleSubmit.bind(this);\n    this.handleDelete=this.handleDelete.bind(this);\n    this.handleComplete=this.handleComplete.bind(this);\n  }\n  \n  handleInput=(e)=>{\n      this.setState({\n         currentItem:{\n           text: e.target.value, key: Date.now()\n         }\n      })\n  }\n  handleSubmit(e){\n    e.preventDefault();\n    const newItem=this.state.currentItem;\n    if(newItem.text!==\"\"){\n      this.setState({\n        items:[newItem,...this.state.items],\n        currentItem:{\n          text:'',key:''\n        }\n      })\n    }\n  }\n  handleDelete(key){\n    var array = this.state.items.filter(item => item.key!==key)\n    this.setState({\n       items:array,\n    })\n  }\n  handleComplete(key){\n    var newitem=this.state.items.filter(item => item.key!==key);\n    this.setState({\n      completedItems:[...this.state.completedItems,newitem]\n    })\n    var array = this.state.items.filter(item => item.key!==key)\n    this.setState({\n       items:array,\n    })\n  }\n  render() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"todo\">\n          <h1>ToDO List</h1>\n        </div>\n      </header>\n      <form onSubmit={this.handleSubmit}> \n      <input className=\"ipt\" type=\"text\" placeholder=\"todos...\" value={this.state.currentItem.text} \n      onChange={this.handleInput}    />\n      <button className=\"add\" onClick={this.handleSubmit}>ADD</button>\n      </form>\n      <div className=\"todoCont\">\n      <ListItems items={this.state.items} completedItems={this.state.completedItems}\n       handleDelete={this.handleDelete} handleComplete={this.handleComplete}/>\n      </div>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}